---
title: The Terrifying Terminal
---

This lesson is to introduce you -- _slowly_ -- to what may be a terrifying interface. The important thing is that everything in this lesson involves doing th


![makin directories](/files/images/mkdir-literal-strings.gif)


# What is the Terminal/Bash/The Shell?


## Why is so terrifying about Terminal?

There's more than one reason. Modern computing is so user-friendly -- open browser, click "Download" link, file magically appears -- that it is jarring to see the details. Files have names. They take up space on the computer and exist at a specific address.

But the shell is terrifying to even programmers. The language used by the modern Unix-like shell still has the design sensibilities -- good and bad -- of a language designed for the limited hardware of the 1970s.

While it's true that the shell is just another way to command your computer, it's no longer the user-friendly inter

## Be careful!

There's no shame in being confused. If something about a command confuses you, just don't run it. If you're the type of clumsy typistTKTKT


# How to get to the Terminal

The Terminal app can be found in __Finder__ by navigating to the __Applications__ folder, then __Utilities__:

![image](files/images/lessons/terminal-app-folder.png)

Since the Terminal is so keyboard-based, it's good to get ourselves [into the keyboard-shortcut mindset](/cheatsheets/keyboard#keys-terminal-shell) as quickly as possible. Finder has a keyboard shortcut for __Go to Folder__: __Command + Shift + G__. The input box will perform autocomplete for you if you hit __Tab__. Begin typing `/Ap`, and then hit __Tab__ to autocomplete to `/Applications`, then to its subdirectory of `Utilities/`, then to `Terminal.app`:

![image](/files/images/lessons/terminal-app-goto-folder.png)

Either way, double-click the __Terminal.app__ icon. If you're on your own computer, might as well drag that puppy to your dock, because you will be clicking it quite frequently.

# The command line prompt

Welcome to your shell! 

You are now experiencing your operating system via a __command line interface__, often abbreviated as __CLI__. I've customized my Terminal settings so mine is going to look a little different than yours:

![img](/files/images/lessons/cli-blinky.gif)

That blinky box is the __cursor__, which signals that the CLI is waiting for you to type something. As soon as you start typing, characters will show up on the left of the cursor. Go ahead and type the classic `hello world` command:

      hello world

Note that the computer does not do anything _until you press the_ __Enter key__, which then signals to the computer: _"Hey, do the thing that I just typed at the prompt"_

## Hello world?

Unfortunately, the computer (at least as of OS X 10.10) by default doesn't know how to _do_ `hello world`; there's no built-in command named `hello` or `world`:

![img](/files/images/lessons/cli-hello-world-oops.gif)

However, the OS X shell _does_ know the `echo` command. Try this:

      echo hello world

What does __echo__ do? It "echoes" back the values  -- i.e. `hello world` -- that you pass to it:

![img echo](/files/images/lessons/cli-hello-world-echo.gif)


Not very exciting -- though the fact that the `echo` command __outputs__ text is a major concept to wrap your head around. You just don't appreciate it because in a modern GUI, virtually every thing you do makes something show up on screen.

But let's do something a little more fun. Instead of `echo`, let's use __say__, which is a command only available to OS X computers. Before you run it, turn up your computer's volume.

#### A note about code conventions

__This is important:__ From here on out, when I show sample code to use at the command line, I __will start each line with a `$`__. It's OK to copy from me -- though you should type/autocomplete the commands without using copy/paste -- but _do not_ copy the `$` that indicates a beginning of a line.

So, here's the example of how to use the `say` command:

~~~sh
$ say hello world
~~~

(__Don't copy the line-beginning `$`!__)


# Say what?

Did you have your volume turned up? Did you hear your computer talk to you? Try typing in a longer string of characters...though, for now, avoid punctuation:

~~~sh
$ say who put the bop in the bop shoo bop shoo bop Who put the dip in the dip dedip de dip
~~~

# The man page

So there's not much to say about `say` -- like most command-line tools, it does what it says it does and very little else. What's the point of such a tool? Can it do anything else?

Like most command-line tools, we can access the documentation of `say` by using _another_ command: __man__

~~~sh
$ man say
~~~

Hit the __spacebar__ to scroll through the documentation. Hit the letter `q` to go back to the prompt.

Reading "man pages" is an acquired skill, so don't worry about feeling overwhelmed. You might have noticed this part:

     -v voice, --voice=voice
         Specify the voice to be used. Default is the voice selected in
         System Preferences. To obtain a list of voices installed in the
         system, specify '?' as the voice name.


Apparently we can change what our computer voice sounds like. Let's follow the instructions to get a list of voices installed on the system. If you're new to Bash syntax, the above excerpt is the convention for telling us that we can run `say` with the `-v` _flag_ (i.e. _option_):

~~~sh
$ say -v ?
~~~

Try out one of the listed voices by passing its name to the `-v` option (and leave out the `?`):

~~~sh
$ say -v Deranged hello world
~~~

## Practice some shell keyboard-fu

This is a good chance to practice some [keyboard shortcuts](/cheatsheets/keyboard#keys-terminal-shell). Follow these steps:

- By now, your Terminal should be filled with a bunch of text from past commands. To clear the screen, hit __Control + K__
- Your Terminal should now be clear except for the prompt. But don't think you've lost your work; run the __history__ command to see the most recent past commands.
- Do you need to re-run a command that you _just_ ran? Hit the __Up__ key.
- When you use __Up__ to recall past commands, it leaves the cursor at the end of the line. Hit __Control + A__ to make the cursor jump to the beginning, if you need to edit something near the beginning.

In the GIF below, I use the __Up__ key to recall a previous `say` command, then __Control + A__ to move the cursor to the beginning, and then I add a new voice option:

![img](/files/images/lessons/cli-deranged-bop.gif)







# Tab (to autocomplete) is our savior

# Go slow


## When a dot is not a dot

These shell commands (written in the Bash syntax):

- grep grep example.txt
- grep "grep example.txt"
- grep "$grep" example.txt
- grep '$grep' example.txt

They look very similar, but they all do very different things.

- She said she's selling Sarah's seashells.
- She said, "She's selling Sarah's seashells."
- "She said, 'She's selling Sarah's seashells.'"


